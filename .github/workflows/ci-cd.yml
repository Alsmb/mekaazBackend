name: CI/CD - Django + Docker + Terraform + Ansible

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

env:
  TF_APP_DIR: infra/app

jobs:
  # --------------------------------------
  # Job 1: Run tests (runs for PRs and push)
  # --------------------------------------
  test:
    name: Run Django tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run migrations
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        run: |
          python manage.py migrate

      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        run: |
          python manage.py test

  # --------------------------------------
  # Job 2: Build & push Docker (only on push->main)
  # --------------------------------------
  build_push:
    name: Build & Push Docker image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      image: ${{ steps.set-image.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/your-app-name:${{ github.sha }}

      - name: Set image output
        id: set-image
        run: |
          echo "image=${{ secrets.DOCKER_HUB_USERNAME }}/your-app-name:${{ github.sha }}" >> $GITHUB_OUTPUT

  # --------------------------------------
  # Job 3: Terraform (app) apply + Ansible deploy (only on push->main)
  # --------------------------------------
  deploy:
    name: Terraform apply & Ansible deploy
    needs: build_push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform init (app)
        working-directory: ${{ env.TF_APP_DIR }}
        run: terraform init

      - name: Terraform apply (app)
        working-directory: ${{ env.TF_APP_DIR }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: terraform apply -auto-approve -var="key_name=${{ secrets.EC2_KEY_NAME }}" -var="allowed_ip=${{ secrets.ALLOWED_IP }}"

      - name: Get instance IP
        id: tf-output
        working-directory: ${{ env.TF_APP_DIR }}
        run: echo "ip=$(terraform output -raw app_public_ip)" >> $GITHUB_OUTPUT

      - name: Prepare inventory
        run: |
          mkdir -p ansible
          sed "s|{{INSTANCE_PUBLIC_IP}}|${{ steps.tf-output.outputs.ip }}|" ansible/inventory.ini.template > ansible/inventory.ini
          cat ansible/inventory.ini

      - name: Install Ansible & deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y python3-pip
          pip3 install ansible==8.5.0
          pip3 install docker   # community.docker needs docker python lib

      - name: Save SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/github_key
          chmod 600 /tmp/github_key

      - name: Run Ansible deploy
        env:
          DOCKER_IMAGE: ${{ needs.build_push.outputs.image }}
        run: |
          ansible-playbook ansible/playbook.yml -i ansible/inventory.ini --private-key=/tmp/deploy_key -e "docker_image=${DOCKER_IMAGE}" -e "db_host=${{ secrets.DB_HOST }}" -e "db_name=${{ secrets.DB_NAME }}" -e "db_user=${{ secrets.DB_USER }}" -e "db_password=${{ secrets.DB_PASSWORD }}"